#![cfg(feature = "program")]

use byteorder::{ByteOrder, BigEndian, LittleEndian};
use solana_sdk::{
    account_info::{next_account_info, AccountInfo},
    entrypoint_deprecated,
    entrypoint_deprecated::ProgramResult,
    info,
    hash::{Hash, HASH_BYTES},
    program_error::ProgramError,
    pubkey::Pubkey,
    sysvar::{
        clock::Clock, slot_hashes::SlotHashes, Sysvar,
    },
};

use std::convert::TryInto;

use solana_sdk::program::invoke_signed;
use spl_token::{instruction};
use solana_sdk::program_pack::Pack as TokenPack;
use spl_token::state::{Account as TokenAccount, Mint};

use std::hash::{Hash as StdHash, Hasher};
use std::collections::hash_map::DefaultHasher;

use num_derive::FromPrimitive;
use solana_sdk::{decode_error::DecodeError};
use thiserror::Error;


fn hash_value<T>(obj: T) -> u64
where
    T: StdHash,
{
    let mut hasher = DefaultHasher::new();
    obj.hash(&mut hasher);
    hasher.finish()
}

const MAX_NUM_SLOT_HASHES: u64 = 512;
fn get_slot_hash(data: &[u8], slot_height: u64) -> Hash {
    let current_slot = u64::from_le_bytes(data[8..16].try_into().unwrap());
    let diff = current_slot - slot_height;
    if (diff > MAX_NUM_SLOT_HASHES) {
        let mut buf = [0u8; HASH_BYTES];
        return Hash::new(&buf);
    } else {
        let target_index = (16 + (diff * 40)) as usize;
        let hash = &data[target_index..target_index + 32];
        return Hash::new(hash);
    }
}

/// Errors that may be returned by the TokenSwap program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum SwapError {
    /// The account cannot be initialized because it is already being used.
    #[error("Swap account already in use")]
    AlreadyInUse,
    /// The address of the admin fee account is incorrect.
    #[error("Address of the admin fee account is incorrect")]
    InvalidAdmin,
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("Input account owner is not the program address")]
    InvalidOwner,
    /// The owner of the pool token output is set to the program address generated by the program.
    #[error("Output pool account owner cannot be the program address")]
    InvalidOutputOwner,
    /// The program address provided doesn't match the value generated by the program.
    #[error("Invalid program address generated from nonce and key")]
    InvalidProgramAddress,
    /// The deserialization of the account returned something besides State::Mint.
    #[error("Deserialized account is not an SPL Token mint")]
    ExpectedMint,
    /// The deserialization of the account returned something besides State::Account.
    #[error("Deserialized account is not an SPL Token account")]
    ExpectedAccount,
    /// The pool supply is empty.
    #[error("Pool token supply is 0")]
    EmptyPool,
    /// The input token account is empty.
    #[error("Input token account empty")]
    EmptySupply,
    /// The pool token mint has a non-zero supply.
    #[error("Pool token mint has a non-zero supply")]
    InvalidSupply,
    /// The provided token account has a delegate.
    #[error("Token account has a delegate")]
    InvalidDelegate,
    /// The input token is invalid for swap.
    #[error("InvalidInput")]
    InvalidInput,
    /// Address of the provided swap token account is incorrect.
    #[error("Address of the provided swap token account is incorrect")]
    IncorrectSwapAccount,
    /// Address of the provided pool token mint is incorrect
    #[error("Address of the provided pool token mint is incorrect")]
    IncorrectPoolMint,
    /// The calculation failed.
    #[error("CalculationFailure")]
    CalculationFailure,
    /// Invalid instruction number passed in.
    #[error("Invalid instruction")]
    InvalidInstruction,
    /// Swap input token accounts have the same mint
    #[error("Swap input token accounts have the same mint")]
    RepeatedMint,
    /// Swap instruction exceeds desired slippage limit
    #[error("Swap instruction exceeds desired slippage limit")]
    ExceededSlippage,
    /// ConversionFailure
    #[error("Conversion to u64 failed with an overflow or underflow")]
    ConversionFailure,
}
impl From<SwapError> for ProgramError {
    fn from(e: SwapError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for SwapError {
    fn type_of() -> &'static str {
        "Swap Error"
    }
}

fn unpack_mint(data: &[u8]) -> Result<Mint, SwapError> {
    TokenPack::unpack(data).map_err(|_| SwapError::ExpectedMint)
}

// Declare and export the program's entrypoint
entrypoint_deprecated!(process_instruction);

// Program entrypoint's implementation
fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    info!("SolanaRoll program entrypoint");

    // Iterating accounts is safer then indexing
    let accounts_iter = &mut accounts.iter();

    // Get command number
    let command_number = _instruction_data[0];

    // 0 - commit reveal_number_hash and under_number
    // 1 - get roll result, validate, compare, move balances
    // 2 - deposit - mint and accept funds
    // 3 - withdraw - burn and send funds
    if command_number == 0 {
        // GAME - COMMIT REVEAL NUMBER
        let reveal_number = _instruction_data[1] as u32;
        let under_number = _instruction_data[2] as u32;

        let payer_account = next_account_info(accounts_iter)?;
        let game_account = next_account_info(accounts_iter)?;

        if game_account.owner != program_id {
            info!("SolanaRoll game_account does not have the correct program id");
            return Err(ProgramError::IncorrectProgramId);
        }

        let mut data = game_account.try_borrow_mut_data()?;
        let sysvar_account = next_account_info(accounts_iter)?;
        let sysvar_slot_history = next_account_info(accounts_iter)?;
        let fund_account = next_account_info(accounts_iter)?;

        let current_slot = Clock::from_account_info(sysvar_account)?.slot;
        let hashed_reveal = hash_value(reveal_number);

        // save game data
        BigEndian::write_u32(&mut data[0..4], under_number);
        BigEndian::write_u64(&mut data[4..12], hashed_reveal);
        BigEndian::write_u64(&mut data[12..20], current_slot);

    } else if command_number == 1 {
        // GAME PLAY
        let reveal_number = _instruction_data[1] as u32;
        let under_number = _instruction_data[2] as u32;

        let payer_account = next_account_info(accounts_iter)?;
        let game_account = next_account_info(accounts_iter)?;
        let mut data = game_account.try_borrow_mut_data()?;
        let sysvar_account = next_account_info(accounts_iter)?;
        let sysvar_slot_history = next_account_info(accounts_iter)?;
        let fund_account = next_account_info(accounts_iter)?;

        // Get the fund balance - stop if not > 0
        let fund_account_balance = fund_account.lamports();

        let treasury_account = next_account_info(accounts_iter)?;
        let user_account = next_account_info(accounts_iter)?;

        // The game_account must be owned by the program in order to modify its data
        let account_balance = game_account.lamports();
        if game_account.owner != program_id {
            info!("SolanaRoll game_account does not have the correct program id");
            return Err(ProgramError::IncorrectProgramId);
        }

        // confirm same reveal number
        let hashed_reveal = hash_value(reveal_number);
        let saved_hashed_reveal = BigEndian::read_u64(&data[4..12]);
        if saved_hashed_reveal == hashed_reveal {
            let current_slot = Clock::from_account_info(sysvar_account)?.slot;
            let saved_slot = BigEndian::read_u64(&data[12..20]);
            if saved_slot < current_slot {

                // Get slot height of saved transaction
                let slot_hashes_data = sysvar_slot_history.try_borrow_data()?;
                let slot_hash = get_slot_hash(&slot_hashes_data, saved_slot);

                // Couldn't find slot_height in recent slots, invalid
                let mut buf = [0u8; HASH_BYTES];
                if slot_hash == Hash::new(&buf) {
                    **fund_account.lamports.borrow_mut() -= fund_account_balance;
                    **user_account.lamports.borrow_mut() += fund_account_balance;
                    info!("Block hash invalid, returning funds");
                } else {

                    info!("Block height and hash valid, obtaining result");

                    let hashed_slot_hash = hash_value(slot_hash);
                    let val = hash_value(hashed_reveal + hashed_slot_hash);
                    let result = (val % 100) + 1;
                    let s: String = result.to_string();
                    let ss: &str = &s;

                    // Save result
                    BigEndian::write_u64(&mut data[20..28], result);

                    let under_number_32 = BigEndian::read_u32(&data[0..4]);
                    let under_number_64 = under_number_32 as u64;

                    let un: String = under_number_64.to_string();
                    let uns: &str = &un;

                    info!("Rolling for a number under:");
                    info!(uns);
                    info!("You rolled a:");
                    info!(ss);

                    info!("    Fund account balance:");
                    let fab: String = fund_account_balance.to_string();
                    let sfab: &str = &fab;
                    info!(sfab);

                    if fund_account_balance <= 1000 {
                        info!("Fund Account is Too Low!");
                        return Err(ProgramError::MissingRequiredSignature);
                    }

                    // Get the treasury balance - stop if not > 0
                    let treasury_account_balance = treasury_account.lamports();

                    // TODO: confirm program owns treasury/fund accs

                    let sub_under_number_64 = under_number_64 - 1;
                    let num = 100 - sub_under_number_64;
                    let tmp = ((num as f64 / sub_under_number_64 as f64 ) as f64 + (1 as f64)) as f64;
                    let house = (990 as f64 / 1000 as f64) as f64;
                    let winning_ratio = ((tmp * house) - (1 as f64)) as f64;
                    let fund_account_balance_f = fund_account_balance as f64;
                    let winnings = (fund_account_balance_f * winning_ratio) as u64;

                    let winnings_str: String = winnings.to_string();
                    let swinnings_str: &str = &winnings_str;
                    info!("Potential winnings:");
                    info!(swinnings_str);

                    // TODO: max profit configurable
                    let treasury_max_profit_f64 = treasury_account_balance as f64 * 0.01;
                    let treasury_max_profit = treasury_max_profit_f64 as u64;
                    let treasury_max_profit_str: String = treasury_max_profit.to_string();
                    let streasury_max_profit_str: &str = &treasury_max_profit_str;
                    info!("Treasury max profit:");
                    info!(streasury_max_profit_str);

                    if winnings > treasury_max_profit {
                        **fund_account.lamports.borrow_mut() -= fund_account_balance;
                        **user_account.lamports.borrow_mut() += fund_account_balance;
                        info!("Potential profit exceeds max profit allowed");
                    } else {
                        if result >= under_number_64 {
                            info!("You LOSE! Funds go to treasury");
                            **fund_account.lamports.borrow_mut() -= fund_account_balance;
                            **treasury_account.lamports.borrow_mut() += fund_account_balance;
                            let lose: String = fund_account_balance.to_string();
                            let slose: &str = &lose;
                            info!(slose);
                        } else {
                            info!("You WIN! Funds go to user");
                            **fund_account.lamports.borrow_mut() -= fund_account_balance;
                            let win: String = winnings.to_string();
                            let swin: &str = &win;
                            info!(swin);

                            if winnings < treasury_account_balance {
                                **treasury_account.lamports.borrow_mut() -= winnings;
                                **user_account.lamports.borrow_mut() += fund_account_balance + winnings;
                            } else {
                                **user_account.lamports.borrow_mut() += fund_account_balance;
                                info!("Treasury not enough for payout, returning funds");
                            }
                        }
                    }
                }

            } else {
                **fund_account.lamports.borrow_mut() -= fund_account_balance;
                **user_account.lamports.borrow_mut() += fund_account_balance;
                // TODO: fee
                info!("Block height invalid, returning funds");
            }

        } else {
            **fund_account.lamports.borrow_mut() -= fund_account_balance;
            **user_account.lamports.borrow_mut() += fund_account_balance;
            // TODO: fee
            info!("Reveal number does not match saved reveal number, returning funds");
        }
    } else if command_number == 2 {
        // Set accounts
        let payer_account = next_account_info(accounts_iter)?;
        let fund_account = next_account_info(accounts_iter)?;
        let treasury_token_account = next_account_info(accounts_iter)?;
        let user_token_account = next_account_info(accounts_iter)?;
        let spl_token_program = next_account_info(accounts_iter)?;
        let treasury_account = next_account_info(accounts_iter)?;

        let fund_account_balance = fund_account.lamports();
        let treasury_account_balance = treasury_account.lamports();

        if fund_account_balance <= 0 {
            info!("Treasury fund account is empty");
            return Err(ProgramError::InvalidAccountData);
        }

        info!("invoke: spl_token::instruction::mint_to");

        let treasury_mint = unpack_mint(&treasury_token_account.data.borrow())?;

        info!("Token supply:");
        let supply = treasury_mint.supply;
        let ssupply = supply.to_string();
        let supply_str: &str = &ssupply;
        info!(supply_str);

        let (mint_address, mint_bump_seed) = Pubkey::find_program_address(&[&payer_account.key.to_bytes(), br"mint"], &spl_token_program.key);

        // Set amount equal to lamports if no supply
        // Otherwise, set pro-rated based on funds/supply
        let mut amount = fund_account_balance;
        let amount_str = amount.to_string();
        let samount_str: &str = &amount_str;
        info!("Fund amount:");
        info!(samount_str);

        let treasury_account_balance_str = treasury_account_balance.to_string();
        let streasury_account_balance_str: &str = &treasury_account_balance_str;
        info!("Treasury_account_balance:");
        info!(streasury_account_balance_str);

        if supply > 0 && treasury_account_balance > 0 {
            amount = ((fund_account_balance as f64 / treasury_account_balance as f64) * supply as f64) as u64;
            let amount_str = amount.to_string();
            let samount_str: &str = &amount_str;
            info!("Fund amount ratioed:");
            info!(samount_str);
        }

        let mint_to_instr = spl_token::instruction::mint_to(
            &spl_token::ID,
            treasury_token_account.key,
            user_token_account.key,
            payer_account.key,
            &[],
            amount,
        )?;

        let account_infos = &[
            treasury_token_account.clone(),
            user_token_account.clone(),
            payer_account.clone(),
            spl_token_program.clone(),
        ];

        let mint_signer_seeds: &[&[_]] = &[
            &payer_account.key.to_bytes(),
            br"mint",
            &[mint_bump_seed],
        ];

        invoke_signed(
            &mint_to_instr,
            account_infos,
            &[&mint_signer_seeds],
        )?;

        info!("Mint successful");

        **fund_account.lamports.borrow_mut() -= fund_account_balance;
        **treasury_account.lamports.borrow_mut() += fund_account_balance;

        info!("Deposit successful");

    } else if command_number == 3 {
        // Set accounts
        let user_account = next_account_info(accounts_iter)?;
        let payer_account = next_account_info(accounts_iter)?;
        let treasury_token_account = next_account_info(accounts_iter)?;
        let user_token_account = next_account_info(accounts_iter)?;
        let spl_token_program = next_account_info(accounts_iter)?;
        let treasury_account = next_account_info(accounts_iter)?;

        let treasury_account_balance = treasury_account.lamports();

        info!("invoke: spl_token::instruction::burn");

        let treasury_mint = unpack_mint(&treasury_token_account.data.borrow())?;

        info!("Token supply:");
        let supply = treasury_mint.supply;
        let ssupply = supply.to_string();
        let supply_str: &str = &ssupply;
        info!(supply_str);

        let token_amount = LittleEndian::read_u64(&_instruction_data[1..9]);
        let amount_str = token_amount.to_string();
        let samount_str: &str = &amount_str;
        info!("Burning token amount:");
        info!(samount_str);

        let treasury_account_balance_str = treasury_account_balance.to_string();
        let streasury_account_balance_str: &str = &treasury_account_balance_str;
        info!("Treasury balance:");
        info!(streasury_account_balance_str);

        let mut amount = token_amount;
        let amount_str = amount.to_string();
        let samount_str: &str = &amount_str;
        info!("Fund amount:");
        info!(samount_str);

        if supply > 0 && treasury_account_balance > 0 {
            amount = ((token_amount as f64 / supply as f64) * treasury_account_balance as f64) as u64;
            let amount_str = amount.to_string();
            let samount_str: &str = &amount_str;
            info!("Fund amount ratioed:");
            info!(samount_str);
        }

        if amount <= 0 {
            info!("Withdraw amount must be > 0");
            return Err(ProgramError::InvalidAccountData);
        }

        let mint_to_instr = spl_token::instruction::burn(
            &spl_token::ID,
            user_token_account.key,
            treasury_token_account.key,
            user_account.key,
            &[],
            token_amount
        )?;

        let account_infos = &[
            user_token_account.clone(),
            treasury_token_account.clone(),
            spl_token_program.clone(),
            user_account.clone(),
        ];

        invoke_signed(
            &mint_to_instr,
            account_infos,
            &[],
        )?;

        info!("Burn successful");

        **treasury_account.lamports.borrow_mut() -= amount;
        **user_account.lamports.borrow_mut() += amount;

        info!("Withdraw successful");
    }

    Ok(())
}

// Sanity tests
#[cfg(test)]
mod test {
    use super::*;
    use solana_sdk::clock::Epoch;

    #[test]
    fn test_sanity() {
        let program_id = Pubkey::default();
        let key = Pubkey::default();
        let mut lamports = 0;
        let mut data = vec![0; mem::size_of::<u64>()];
        LittleEndian::write_u64(&mut data, 0);
        let owner = Pubkey::default();
        let account = AccountInfo::new(
            &key,
            false,
            true,
            &mut lamports,
            &mut data,
            &owner,
            false,
            Epoch::default(),
        );
        let instruction_data: Vec<u8> = Vec::new();

        let accounts = vec![account];

        assert_eq!(LittleEndian::read_u64(&accounts[0].data.borrow()), 0);
        process_instruction(&program_id, &accounts, &instruction_data).unwrap();
        assert_eq!(LittleEndian::read_u64(&accounts[0].data.borrow()), 1);
        process_instruction(&program_id, &accounts, &instruction_data).unwrap();
        assert_eq!(LittleEndian::read_u64(&accounts[0].data.borrow()), 2);
    }
}

// Required to support info! in tests
#[cfg(not(target_arch = "bpf"))]
solana_sdk::program_stubs!();
